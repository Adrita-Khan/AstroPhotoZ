# -*- coding: utf-8 -*-
"""sdss_photometric_redshift_query.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JZAiCMk_aS0O3YJfnwRAPUqIQDgzzouJ

This code queries the SDSS database to retrieve and display photometric redshift data for 5000 objects meeting specific criteria, using `astroquery` and `astropy`.
"""

from astroquery.sdss import SDSS
from astropy.table import Table

# Define the SQL query to retrieve photometric redshift data
query = """
SELECT TOP 5000
    p.objID,
    p.ra,
    p.dec,
    p.u, p.g, p.r, p.i, p.z,
    z.z as photometric_redshift,
    z.zErr as photometric_redshift_error
FROM PhotoObj AS p
JOIN Photoz AS z ON p.objID = z.objID
WHERE z.z BETWEEN 0.0 AND 1.0
AND p.u BETWEEN 14 AND 22
AND p.g BETWEEN 14 AND 22
AND p.r BETWEEN 14 AND 22
AND p.i BETWEEN 14 AND 22
AND p.z BETWEEN 14 AND 22
AND z.photoErrorClass = 1
"""

# Execute the query
result = SDSS.query_sql(query)

# Check if the result is not None
if result:
    # Convert the result to an Astropy Table
    data_table = Table(result)
    # Display the first few rows
    print(data_table[:5])
else:
    print("No data retrieved from the query.")

"""Similarly, the following code queries the SDSS database for photometric redshift data of up to 50,000 objects that meet specific magnitude and redshift criteria, ensuring quality by filtering based on error class. The retrieved data includes object IDs, positions (RA and Dec), photometric magnitudes in five bands (u, g, r, i, z), redshift values, and their errors. The results are converted into an Astropy Table, saved to a CSV file named `sdss_photometric_redshift_data.csv`, and a preview of the first few rows is printed. If no data is retrieved, it notifies the user."""

from astroquery.sdss import SDSS
from astropy.table import Table

# Define the SQL query to retrieve photometric redshift data
query = """
SELECT TOP 50000
    p.objID,
    p.ra,
    p.dec,
    p.u, p.g, p.r, p.i, p.z,
    z.z as photometric_redshift,
    z.zErr as photometric_redshift_error
FROM PhotoObj AS p
JOIN Photoz AS z ON p.objID = z.objID
WHERE z.z BETWEEN 0.0 AND 1.0
AND p.u BETWEEN 14 AND 22
AND p.g BETWEEN 14 AND 22
AND p.r BETWEEN 14 AND 22
AND p.i BETWEEN 14 AND 22
AND p.z BETWEEN 14 AND 22
AND z.photoErrorClass = 1
"""

# Execute the query
result = SDSS.query_sql(query)

# Check if the result is not None
if result:
    # Convert the result to an Astropy Table
    data_table = Table(result)

    # Save the data to a CSV file
    csv_filename = "sdss_photometric_redshift_data.csv"
    data_table.write(csv_filename, format='csv', overwrite=True)

    # Display the first few rows
    print(f"Data successfully saved to {csv_filename}")
    print(data_table[:5])
else:
    print("No data retrieved from the query.")

"""The following code queries the SDSS database to retrieve photometric redshift data for 5,000 objects that meet specific quality and magnitude criteria. It selects object IDs, sky positions (RA and Dec), model magnitudes in five bands (u, g, r, i, z), photometric redshift values, and associated errors. The query filters objects with clean data flags (`p.clean = 1`) and high-quality photometric redshift classifications (`z.photoErrorClass = 1`). The retrieved data is converted to an Astropy Table and displays the first few rows if successful, otherwise notifies the user of no results."""

from astroquery.sdss import SDSS
from astropy.table import Table

# Define the SQL query to retrieve photometric redshift data
query = """
SELECT TOP 5000
    p.objID,
    p.ra,
    p.dec,
    p.modelMag_u,
    p.modelMag_g,
    p.modelMag_r,
    p.modelMag_i,
    p.modelMag_z,
    z.z as photometric_redshift,
    z.zErr as photometric_redshift_error
FROM PhotoObjAll AS p
JOIN Photoz AS z ON p.objID = z.objID
WHERE z.z BETWEEN 0.0 AND 1.0
AND p.modelMag_u BETWEEN 14 AND 22
AND p.modelMag_g BETWEEN 14 AND 22
AND p.modelMag_r BETWEEN 14 AND 22
AND p.modelMag_i BETWEEN 14 AND 22
AND p.modelMag_z BETWEEN 14 AND 22
AND p.clean = 1
AND z.photoErrorClass = 1
"""

# Execute the query
result = SDSS.query_sql(query)

# Check if the result is not None
if result:
    # Convert the result to an Astropy Table
    data_table = Table(result)

    # Save the data to a CSV file
    csv_filename = "sdss_photometric_redshift_data_modelMag.csv"
    data_table.write(csv_filename, format='csv', overwrite=True)

    # Display a success message and the first few rows
    print(f"Data successfully saved to {csv_filename}")
    print(data_table[:5])
else:
    print("No data retrieved from the query.")

from astroquery.sdss import SDSS
from astropy.table import Table

# Define the SQL query to retrieve photometric redshift data
query = """
SELECT TOP 100
    p.objID,
    p.ra,
    p.dec,
    p.modelMag_u,
    p.modelMag_g,
    p.modelMag_r,
    p.modelMag_i,
    p.modelMag_z,
    z.z as photoz,
    z.zErr as photoz_err,
    z.absMagR as abs_mag_r
FROM
    PhotoObj AS p
JOIN
    Photoz AS z ON p.objID = z.objID
WHERE
    z.photoErrorClass = 1
    AND z.z BETWEEN 0.4 AND 0.5
"""

# Execute the query
results = SDSS.query_sql(query)

# Check if results are returned
if results:
    # Convert to an Astropy Table for better handling
    data_table = Table(results)

    # Save the data to a CSV file
    csv_filename = "sdss_photoz_abs_mag_data.csv"
    data_table.write(csv_filename, format="csv", overwrite=True)

    # Display success message and the first few rows
    print(f"Data successfully saved to {csv_filename}")
    print(data_table[:5])
else:
    print("No results found.")

from astroquery.sdss import SDSS
from astropy.table import Table

# Define the SQL query to retrieve photometric redshift data
query = """
SELECT TOP 100
    p.objID,
    p.ra,
    p.dec,
    p.modelMag_u,
    p.modelMag_g,
    p.modelMag_r,
    p.modelMag_i,
    p.modelMag_z,
    z.z as photoz,
    z.zErr as photoz_err
FROM
    PhotoObj AS p
JOIN
    Photoz AS z ON p.objID = z.objID
WHERE
    z.z BETWEEN 0.4 AND 0.5
    AND z.photoErrorClass = 1
"""

# Execute the query
results = SDSS.query_sql(query)

# Check if results are returned
if results:
    # Convert to an Astropy Table for better handling
    data_table = Table(results)

    # Save the data to a CSV file
    csv_filename = "sdss_photoz_data.csv"
    data_table.write(csv_filename, format="csv", overwrite=True)

    # Display success message and the first few rows
    print(f"Data successfully saved to {csv_filename}")
    print(data_table[:5])
else:
    print("No results found.")

from astroquery.sdss import SDSS
from astropy import coordinates as coord
import astropy.units as u
import pandas as pd

# Define the sky region of interest
ra = 180.0  # Right Ascension in degrees
dec = 0.0   # Declination in degrees
radius = 2 * u.arcmin  # Search radius

# Create a SkyCoord object
sky_coord = coord.SkyCoord(ra=ra, dec=dec, frame='icrs', unit=(u.deg, u.deg))

# Query SDSS for photometric data
try:
    # Fetch data from the PhotoObjAll table (DR16 as an example)
    photometric_data = SDSS.query_region(
        sky_coord,
        radius=radius,
        data_release=16,  # Specify the SDSS data release
        photoobj_fields=['objid', 'ra', 'dec', 'u', 'g', 'r', 'i', 'z',
                         'modelMag_u', 'modelMag_g', 'modelMag_r', 'modelMag_i', 'modelMag_z']
    )

    # Check if any data was retrieved
    if photometric_data:
        # Convert the result to a pandas DataFrame
        df = photometric_data.to_pandas()

        # Display the first few rows
        print("Retrieved Photometric Data:")
        print(df.head())

        # Save the data to a CSV file
        csv_filename = 'sdss_photometric_data.csv'
        df.to_csv(csv_filename, index=False)
        print(f"Data successfully saved to {csv_filename}")
    else:
        print("No objects found in the specified region.")
except Exception as e:
    print(f"An error occurred: {e}")